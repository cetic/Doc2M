/**
 */
package simplekaos.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import simplekaos.util.SimplekaosAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimplekaosItemProviderAdapterFactory extends SimplekaosAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimplekaosItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.KDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KDiagramItemProvider kDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.KDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKDiagramAdapter() {
		if (kDiagramItemProvider == null) {
			kDiagramItemProvider = new KDiagramItemProvider(this);
		}

		return kDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.Obstacle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObstacleItemProvider obstacleItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.Obstacle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObstacleAdapter() {
		if (obstacleItemProvider == null) {
			obstacleItemProvider = new ObstacleItemProvider(this);
		}

		return obstacleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.GRefinement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GRefinementItemProvider gRefinementItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.GRefinement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGRefinementAdapter() {
		if (gRefinementItemProvider == null) {
			gRefinementItemProvider = new GRefinementItemProvider(this);
		}

		return gRefinementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.ORefinement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORefinementItemProvider oRefinementItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.ORefinement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORefinementAdapter() {
		if (oRefinementItemProvider == null) {
			oRefinementItemProvider = new ORefinementItemProvider(this);
		}

		return oRefinementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.Assignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentItemProvider assignmentItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.Assignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentAdapter() {
		if (assignmentItemProvider == null) {
			assignmentItemProvider = new AssignmentItemProvider(this);
		}

		return assignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.KPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KPackageItemProvider kPackageItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.KPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKPackageAdapter() {
		if (kPackageItemProvider == null) {
			kPackageItemProvider = new KPackageItemProvider(this);
		}

		return kPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.KGReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KGReferenceItemProvider kgReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.KGReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKGReferenceAdapter() {
		if (kgReferenceItemProvider == null) {
			kgReferenceItemProvider = new KGReferenceItemProvider(this);
		}

		return kgReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.Conflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConflictItemProvider conflictItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.Conflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConflictAdapter() {
		if (conflictItemProvider == null) {
			conflictItemProvider = new ConflictItemProvider(this);
		}

		return conflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.Responsibility} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponsibilityItemProvider responsibilityItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.Responsibility}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponsibilityAdapter() {
		if (responsibilityItemProvider == null) {
			responsibilityItemProvider = new ResponsibilityItemProvider(this);
		}

		return responsibilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.Obstruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObstructionItemProvider obstructionItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.Obstruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObstructionAdapter() {
		if (obstructionItemProvider == null) {
			obstructionItemProvider = new ObstructionItemProvider(this);
		}

		return obstructionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.Resolution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResolutionItemProvider resolutionItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.Resolution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResolutionAdapter() {
		if (resolutionItemProvider == null) {
			resolutionItemProvider = new ResolutionItemProvider(this);
		}

		return resolutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.Agent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentItemProvider agentItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.Agent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentAdapter() {
		if (agentItemProvider == null) {
			agentItemProvider = new AgentItemProvider(this);
		}

		return agentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.TextDocument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextDocumentItemProvider textDocumentItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.TextDocument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextDocumentAdapter() {
		if (textDocumentItemProvider == null) {
			textDocumentItemProvider = new TextDocumentItemProvider(this);
		}

		return textDocumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplekaos.KReport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KReportItemProvider kReportItemProvider;

	/**
	 * This creates an adapter for a {@link simplekaos.KReport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKReportAdapter() {
		if (kReportItemProvider == null) {
			kReportItemProvider = new KReportItemProvider(this);
		}

		return kReportItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (kDiagramItemProvider != null) kDiagramItemProvider.dispose();
		if (obstacleItemProvider != null) obstacleItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (gRefinementItemProvider != null) gRefinementItemProvider.dispose();
		if (oRefinementItemProvider != null) oRefinementItemProvider.dispose();
		if (assignmentItemProvider != null) assignmentItemProvider.dispose();
		if (kPackageItemProvider != null) kPackageItemProvider.dispose();
		if (kgReferenceItemProvider != null) kgReferenceItemProvider.dispose();
		if (conflictItemProvider != null) conflictItemProvider.dispose();
		if (responsibilityItemProvider != null) responsibilityItemProvider.dispose();
		if (obstructionItemProvider != null) obstructionItemProvider.dispose();
		if (resolutionItemProvider != null) resolutionItemProvider.dispose();
		if (agentItemProvider != null) agentItemProvider.dispose();
		if (textDocumentItemProvider != null) textDocumentItemProvider.dispose();
		if (kReportItemProvider != null) kReportItemProvider.dispose();
	}

}
